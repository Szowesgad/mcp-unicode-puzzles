#!/usr/bin/env node
import { StegoPuzzleManager } from './src/steganography/manager.js';
import { TemplateEngine } from './src/templates/engine.js';

const puzzleManager = new StegoPuzzleManager();
const templates = new TemplateEngine();

// Test different templates and encoding methods
async function testAllTechniques() {
  const message = "Just a normal LinkedIn post about innovation and synergy!";
  const secret = "ACTUALLY I HATE CORPORATE BUZZWORDS";
  
  console.log("=== üß™ TESTING ALL STEGANOGRAPHY TECHNIQUES ===\n");
  
  // Test 1: Quantum Template (Binary Encoding)
  console.log("1Ô∏è‚É£ QUANTUM TEMPLATE (Binary Encoding):");
  const quantumTemplate = templates.getTemplate('quantum');
  const quantumPuzzle = await puzzleManager.createPuzzle({
    template: quantumTemplate,
    message: message,
    secret: secret,
    difficulty: 'medium'
  });
  console.log(quantumPuzzle);
  console.log(`Hidden chars: ${countZeroWidth(quantumPuzzle)}\n`);
  
  // Test 2: Orbital Template (Trinary Encoding)
  console.log("2Ô∏è‚É£ ORBITAL TEMPLATE (Trinary Encoding):");
  const orbitalTemplate = templates.getTemplate('orbital');
  const orbitalPuzzle = await puzzleManager.createPuzzle({
    template: orbitalTemplate,
    message: message,
    secret: secret,
    difficulty: 'hard'
  });
  console.log(orbitalPuzzle);
  console.log(`Hidden chars: ${countZeroWidth(orbitalPuzzle)}\n`);
  
  // Test 3: Void Template
  console.log("3Ô∏è‚É£ VOID TEMPLATE (Space Theme):");
  const voidTemplate = templates.getTemplate('void');
  const voidPuzzle = await puzzleManager.createPuzzle({
    template: voidTemplate,
    message: message,
    secret: secret,
    difficulty: 'easy'
  });
  console.log(voidPuzzle);
  console.log(`Hidden chars: ${countZeroWidth(voidPuzzle)}\n`);
  
  // Test 4: Custom Unicode Art
  console.log("4Ô∏è‚É£ CUSTOM UNICODE ART:");
  const customMessage = createUnicodeArt(message, secret);
  console.log(customMessage);
  console.log(`Hidden chars: ${countZeroWidth(customMessage)}\n`);
  
  // Test 5: Homoglyph Attack
  console.log("5Ô∏è‚É£ HOMOGLYPH CONFUSION:");
  const homoglyphMessage = createHomoglyphMessage(message);
  console.log(homoglyphMessage);
  console.log("(Uses lookalike characters from different Unicode blocks)\n");
}

// Count zero-width characters
function countZeroWidth(text) {
  const zeroWidthRegex = /[\u200B-\u200F\u2060-\u206F]/g;
  const matches = text.match(zeroWidthRegex);
  return matches ? matches.length : 0;
}

// Create Unicode art with hidden message
function createUnicodeArt(visible, hidden) {
  const frames = ['‚ü¶', '‚üß'];
  const decorations = ['‚ú¶', '‚úß', '‚ú∂', '‚ú∑', '‚ú∏', '‚úπ'];
  
  let result = frames[0] + ' ';
  
  // Add decorations with hidden zero-width chars
  for (let i = 0; i < 5; i++) {
    result += decorations[Math.floor(Math.random() * decorations.length)];
    if (i < hidden.length) {
      result += hidden.charCodeAt(i) % 2 ? '\u200B' : '\u200C';
    }
  }
  
  result += ' ' + visible + ' ';
  
  // More decorations
  for (let i = 0; i < 5; i++) {
    result += decorations[Math.floor(Math.random() * decorations.length)];
    if (i + 5 < hidden.length) {
      result += hidden.charCodeAt(i + 5) % 2 ? '\u200D' : '\u200E';
    }
  }
  
  result += ' ' + frames[1];
  return result;
}

// Create message with homoglyphs
function createHomoglyphMessage(text) {
  const homoglyphs = {
    'a': ['–∞', 'ÔΩÅ', 'ùêö', 'ùëé', 'ùíÇ', 'ùí∂', 'ùì™', 'ùîû', 'ùïí', 'ùñÜ', 'ùñ∫', 'ùóÆ', 'ùò¢', 'ùôñ', 'ùöä'],
    'e': ['–µ', 'ÔΩÖ', '‚ÑØ', 'ùêû', 'ùëí', 'ùíÜ', 'ùìÆ', 'ùî¢', 'ùïñ', 'ùñä', 'ùñæ', 'ùó≤', 'ùò¶', 'ùôö', 'ùöé'],
    'o': ['–æ', 'ÔΩè', '‚Ñ¥', 'ùê®', 'ùëú', 'ùíê', 'ùì∏', 'ùî¨', 'ùï†', 'ùñî', 'ùóà', 'ùóº', 'ùò∞', 'ùô§', 'ùöò'],
    'i': ['—ñ', 'ÔΩâ', '‚Ñπ', 'ùê¢', 'ùëñ', 'ùíä', 'ùì≤', 'ùî¶', 'ùïö', 'ùñé', 'ùóÇ', 'ùó∂', 'ùò™', 'ùôû', 'ùöí'],
    'l': ['”è', 'ÔΩå', '‚Ñì', 'ùê•', 'ùëô', 'ùíç', 'ùìµ', 'ùî©', 'ùïù', 'ùñë', 'ùóÖ', 'ùóπ', 'ùò≠', 'ùô°', 'ùöï'],
    'n': ['’∏', 'ÔΩé', 'ùêß', 'ùëõ', 'ùíè', 'ùì∑', 'ùî´', 'ùïü', 'ùñì', 'ùóá', 'ùóª', 'ùòØ', 'ùô£', 'ùöó'],
    's': ['—ï', 'ÔΩì', 'ùê¨', 'ùë†', 'ùíî', 'ùìº', 'ùî∞', 'ùï§', 'ùñò', 'ùóå', 'ùòÄ', 'ùò¥', 'ùô®', 'ùöú'],
    ' ': [' ', ' ', ' ', ' ', ' ', ' '] // Various space characters
  };
  
  return text.split('').map(char => {
    const lower = char.toLowerCase();
    if (homoglyphs[lower]) {
      const alternatives = homoglyphs[lower];
      return alternatives[Math.floor(Math.random() * alternatives.length)];
    }
    return char;
  }).join('');
}

// Run tests
testAllTechniques().catch(console.error);