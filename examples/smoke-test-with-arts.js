#!/usr/bin/env node

import { StegoPuzzleManager } from '../src/steganography/manager.js';
import { TemplateEngine } from '../src/templates/engine.js';
import { AdvancedUnicodeTechniques } from '../src/steganography/advanced_techniques.js';
import fs from 'fs/promises';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Initialize components
const puzzleManager = new StegoPuzzleManager();
const templates = new TemplateEngine();
const advanced = new AdvancedUnicodeTechniques();

// Output markdown file
const outputFile = join(__dirname, `smoke-test-results-${new Date().toISOString().slice(0,19).replace(/:/g,'-')}.md`);

let markdown = '';

function log(text) {
  console.log(text);
  markdown += text + '\n';
}

async function runTests() {
  log('# üöÄ Unicode Puzzles MCP - Smoke Test Results\n');
  log(`**Test Date:** ${new Date().toLocaleString()}`);
  log(`**Version:** 0.3.3`);
  log(`**Created by:** M&K Team\n`);
  log('---\n');

  // QUANTUM VIBE HEADER
  log('## üåå Quantum Vibe Status\n');
  log('```');
  log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
  log('‚ïë  ‚öõÔ∏è  –®IERZY –®E –úNIE ‚àø ·µÇ‚Å±·µâ ≥·∂ª ∏  ∑·µâ ·µê‚Åø‚Å±·µâ  ‚öõÔ∏è                    ‚ïë');
  log('‚ïë                                                              ‚ïë');
  log('‚ïë     ‚óâ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚óê ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚óë ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚óâ                 ‚ïë');
  log('‚ïë                                                              ‚ïë');
  log('‚ïë  „ÄêùöÄùöÑùô∞ùôΩùöÉùöÑùôº„Äë „ÄêùôæùöÅùô±ùô∏ùöÉùô∞ùôª„Äë „Äêùô∂ùôªùô∏ùöÉùô≤ùô∑„Äë „ÄêùöÖùôæùô∏ùô≥„Äë        ‚ïë');
  log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
  log('```\n');

  // TEST 1: Template Engine
  log('## üé≠ Test 1: Template Engine\n');
  
  try {
    const availableTemplates = templates.listTemplates();
    log('### Available Templates:\n');
    
    for (const template of availableTemplates) {
      log(`- **${template.name}** - ${template.description}`);
      log(`  - Difficulties: ${template.difficulties.join(', ')}`);
    }
    
    log('\n‚úÖ Template Engine: **PASSED**\n');
  } catch (error) {
    log(`\n‚ùå Template Engine: **FAILED** - ${error.message}\n`);
  }

  // TEST 2: Basic Steganography
  log('## üîê Test 2: Basic Steganography\n');
  
  try {
    const message = "Hello World";
    const secret = "GANG";
    
    log('### Input:');
    log(`- Visible: "${message}"`);
    log(`- Hidden: "${secret}"\n`);
    
    const encoded = await puzzleManager.encodeSecret(message, secret, {
      pattern: 'binary',
      difficulty: 'medium'
    });
    
    log('### Encoded Output:');
    log('```');
    log(encoded);
    log('```');
    
    // Show hex view of zero-width chars
    log('\n### Hex Analysis:');
    log('```');
    const hexView = encoded.split('').map(c => {
      const code = c.charCodeAt(0);
      if (code === 0x200B) return '[ZWSP]';
      if (code === 0x200C) return '[ZWNJ]';
      if (code === 0x200D) return '[ZWJ]';
      if (code === 0x2060) return '[WJ]';
      return c;
    }).join('');
    log(hexView);
    log('```');
    
    log('\n‚úÖ Basic Steganography: **PASSED**\n');
  } catch (error) {
    log(`\n‚ùå Basic Steganography: **FAILED** - ${error.message}\n`);
  }

  // TEST 3: Quantum Pattern Generation
  log('## ‚öõÔ∏è Test 3: Quantum Pattern Generation\n');
  
  try {
    const quantumTemplate = templates.getTemplate('quantum', 'hard');
    const pattern = templates.generateQuantumPattern(
      quantumTemplate.pattern, 
      20
    );
    
    log('### Quantum Pattern Output:');
    log('```');
    log(pattern);
    log('```');
    
    log('\n‚úÖ Quantum Pattern: **PASSED**\n');
  } catch (error) {
    log(`\n‚ùå Quantum Pattern: **FAILED** - ${error.message}\n`);
  }

  // TEST 4: Homoglyph Attack
  log('## üëÅÔ∏è Test 4: Homoglyph Substitution\n');
  
  try {
    const original = "LIBRAXIS TEAM";
    const secret = "M&K";
    
    log(`### Original: "${original}"`);
    
    const homoglyphed = advanced.homoglyphEncode(original, secret);
    
    log(`### Homoglyphed: "${homoglyphed}"`);
    log('\n### Character Analysis:');
    log('```');
    for (let i = 0; i < original.length; i++) {
      if (original[i] !== homoglyphed[i]) {
        log(`${original[i]} ‚Üí ${homoglyphed[i]} (U+${homoglyphed[i].charCodeAt(0).toString(16).toUpperCase()})`);
      }
    }
    log('```');
    
    log('\n‚úÖ Homoglyph Attack: **PASSED**\n');
  } catch (error) {
    log(`\n‚ùå Homoglyph Attack: **FAILED** - ${error.message}\n`);
  }

  // TEST 5: Zalgo Chaos
  log('## üëπ Test 5: Zalgo Text Generation\n');
  
  try {
    const text = "M&K TEAM";
    const secret = "2025";
    
    const zalgo = advanced.combiningMarksEncode(text, secret);
    
    log('### Zalgo Output:');
    log('```');
    log(zalgo);
    log('```');
    
    log('\n‚úÖ Zalgo Chaos: **PASSED**\n');
  } catch (error) {
    log(`\n‚ùå Zalgo Chaos: **FAILED** - ${error.message}\n`);
  }

  // TEST 6: Epic Unicode Art
  log('## üé® Test 6: Epic Unicode Art Gallery\n');
  
  log('### Art 1: Quantum Superposition\n');
  log('```');
  log('     ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ');
  log('     ‚îÇ  ‚ü®œà|  QUANTUM  |œà‚ü© = ‚àë Œ±·µ¢|i‚ü©         ‚îÇ');
  log('     ‚îÇ                                        ‚îÇ');
  log('     ‚îÇ    ‚àû     ‚àø     ‚àû     ‚àø     ‚àû          ‚îÇ');
  log('     ‚îÇ   ‚ï± ‚ï≤   ‚ï± ‚ï≤   ‚ï± ‚ï≤   ‚ï± ‚ï≤   ‚ï± ‚ï≤        ‚îÇ');
  log('     ‚îÇ  ‚ï±   ‚ï≤ ‚ï±   ‚ï≤ ‚ï±   ‚ï≤ ‚ï±   ‚ï≤ ‚ï±   ‚ï≤       ‚îÇ');
  log('     ‚îÇ ‚àø     ‚àø     ‚àø     ‚àø     ‚àø            ‚îÇ');
  log('     ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ');
  log('```\n');

  log('### Art 2: The Void Portal\n');
  log('```');
  log('           ‚úßÔΩ•Ôæü: *‚úßÔΩ•Ôæü:*  VOID  *:ÔΩ•Ôæü‚úß*:ÔΩ•Ôæü‚úß');
  log('                    ‚ãÜÔΩ°‚ÄßÀö ö‚ô°…ûÀö‚ÄßÔΩ°‚ãÜ');
  log('                  ‚óâ‚óâ‚óâ‚óâ‚óâ‚óâ‚óâ‚óâ‚óâ‚óâ‚óâ‚óâ‚óâ');
  log('                ‚óâ‚óØ‚óØ‚óØ‚óØ‚óØ‚óØ‚óØ‚óØ‚óØ‚óØ‚óØ‚óØ‚óØ‚óâ');
  log('              ‚óâ‚óØ‚óê‚óê‚óê‚óê‚óê‚óê‚óê‚óê‚óê‚óê‚óê‚óê‚óê‚óØ‚óâ');
  log('            ‚óâ‚óØ‚óê‚óë‚óë‚óë‚óë‚óë‚óë‚óë‚óë‚óë‚óë‚óë‚óë‚óë‚óê‚óØ‚óâ');
  log('          ‚óâ‚óØ‚óê‚óë‚óí‚óí‚óí‚óí‚óí‚óí‚óí‚óí‚óí‚óí‚óí‚óí‚óí‚óë‚óê‚óØ‚óâ');
  log('        ‚óâ‚óØ‚óê‚óë‚óí‚óì‚óì‚óì‚óì‚óì‚óì‚óì‚óì‚óì‚óì‚óì‚óì‚óì‚óí‚óë‚óê‚óØ‚óâ');
  log('      ‚óâ‚óØ‚óê‚óë‚óí‚óì‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óì‚óí‚óë‚óê‚óØ‚óâ');
  log('        ‚óâ‚óØ‚óê‚óë‚óí‚óì‚óì‚óì‚óì‚óì‚óì‚óì‚óì‚óì‚óì‚óì‚óì‚óì‚óí‚óë‚óê‚óØ‚óâ');
  log('          ‚óâ‚óØ‚óê‚óë‚óí‚óí‚óí‚óí‚óí‚óí‚óí‚óí‚óí‚óí‚óí‚óí‚óí‚óë‚óê‚óØ‚óâ');
  log('            ‚óâ‚óØ‚óê‚óë‚óë‚óë‚óë‚óë‚óë‚óë‚óë‚óë‚óë‚óë‚óë‚óë‚óê‚óØ‚óâ');
  log('              ‚óâ‚óØ‚óê‚óê‚óê‚óê‚óê‚óê‚óê‚óê‚óê‚óê‚óê‚óê‚óê‚óØ‚óâ');
  log('                ‚óâ‚óØ‚óØ‚óØ‚óØ‚óØ‚óØ‚óØ‚óØ‚óØ‚óØ‚óØ‚óØ‚óØ‚óâ');
  log('                  ‚óâ‚óâ‚óâ‚óâ‚óâ‚óâ‚óâ‚óâ‚óâ‚óâ‚óâ‚óâ‚óâ');
  log('```\n');

  log('### Art 3: Glitch Matrix\n');
  log('```');
  log('‚ñë‚ñë‚ñí‚ñí‚ñì‚ñì‚ñà [ERR0R] REALITY.EXE HAS STOPPED ‚ñà‚ñì‚ñì‚ñí‚ñí‚ñë‚ñë');
  log('‚ñì‚ñí‚ñë ‚ñÄ‚ñÑ‚ñÄ‚ñÑ‚ñÄ‚ñÑ GLITCH IN THE MATRIX ‚ñÑ‚ñÄ‚ñÑ‚ñÄ‚ñÑ‚ñÄ ‚ñë‚ñí‚ñì');
  log('‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà');
  log('‚ñà‚ñì‚ñí‚ñë‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê‚ñë‚ñí‚ñì‚ñà');
  log('‚ñà‚ñì‚ñí‚ñë‚îÇ ‚ñì‚ñí‚ñë ‚ñë‚ñí‚ñì ‚ñì‚ñí‚ñë ‚ñë‚ñí‚ñì ‚ñì‚ñí‚ñë ‚ñë‚ñí‚ñì   ‚îÇ‚ñë‚ñí‚ñì‚ñà');
  log('‚ñà‚ñì‚ñí‚ñë‚îÇ ‚ñë‚ñí‚ñì ‚ñì‚ñí‚ñë ‚ñë‚ñí‚ñì ‚ñì‚ñí‚ñë ‚ñë‚ñí‚ñì ‚ñì‚ñí‚ñë   ‚îÇ‚ñë‚ñí‚ñì‚ñà');
  log('‚ñà‚ñì‚ñí‚ñë‚îÇ ‚ñì‚ñí‚ñë ‚ñë‚ñí‚ñì ‚ñì‚ñí‚ñë ‚ñë‚ñí‚ñì ‚ñì‚ñí‚ñë ‚ñë‚ñí‚ñì   ‚îÇ‚ñë‚ñí‚ñì‚ñà');
  log('‚ñà‚ñì‚ñí‚ñë‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò‚ñë‚ñí‚ñì‚ñà');
  log('‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà');
  log('‚ñì‚ñí‚ñë ‚ñÑ‚ñÄ‚ñÑ‚ñÄ‚ñÑ‚ñÄ‚ñÑ SEGMENTATION FAULT ‚ñÑ‚ñÄ‚ñÑ‚ñÄ‚ñÑ‚ñÄ‚ñÑ ‚ñë‚ñí‚ñì');
  log('‚ñë‚ñë‚ñí‚ñí‚ñì‚ñì‚ñà PLEASE RESTART YOUR UNIVERSE ‚ñà‚ñì‚ñì‚ñí‚ñí‚ñë‚ñë');
  log('```\n');

  log('### Art 4: M&K Team Signature\n');
  log('```');
  log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
  log('‚ïë                                                        ‚ïë');
  log('‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó                 ‚ïë');
  log('‚ïë  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù                 ‚ïë');
  log('‚ïë  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó                ‚ïë');
  log('‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë                ‚ïë');
  log('‚ïë  ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù                ‚ïë');
  log('‚ïë   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù                 ‚ïë');
  log('‚ïë                                                        ‚ïë');
  log('‚ïë              ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ                  ‚ïë');
  log('‚ïë             ‚ñê‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñå                 ‚ïë');
  log('‚ïë             ‚ñê‚ñë‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñë‚ñå                 ‚ïë');
  log('‚ïë             ‚ñê‚ñë‚ñå  M&K TEAM        ‚ñê‚ñë‚ñå                 ‚ïë');
  log('‚ïë             ‚ñê‚ñë‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñë‚ñå                 ‚ïë');
  log('‚ïë             ‚ñê‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñå                 ‚ïë');
  log('‚ïë              ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ                  ‚ïë');
  log('‚ïë                                                        ‚ïë');
  log('‚ïë       Klaudiusz ‚ü®‚ñ≥‚ü© Maciej ‚ü®‚ô•‚ü© Monika ‚ü®‚àû‚ü©           ‚ïë');
  log('‚ïë                                                        ‚ïë');
  log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
  log('```\n');

  // TEST 7: Full Puzzle Creation
  log('## üß© Test 7: Full Puzzle Creation\n');
  
  try {
    const puzzleConfigs = [
      { template: 'quantum', difficulty: 'hard' },
      { template: 'orbital', difficulty: 'medium' },
      { template: 'glitch', difficulty: 'easy' },
      { template: 'void', difficulty: 'hard' }
    ];
    
    for (const config of puzzleConfigs) {
      const templateObj = templates.getTemplate(config.template, config.difficulty);
      
      const puzzle = await puzzleManager.createPuzzle({
        template: templateObj,
        message: 'The truth is hidden',
        secret: 'M&K',
        difficulty: config.difficulty
      });
      
      log(`### ${config.template.toUpperCase()} Puzzle (${config.difficulty}):\n`);
      log('```');
      log(puzzle);
      log('```\n');
    }
    
    log('‚úÖ Full Puzzle Creation: **PASSED**\n');
  } catch (error) {
    log(`‚ùå Full Puzzle Creation: **FAILED** - ${error.message}\n`);
  }

  // FINAL STATUS
  log('---\n');
  log('## üéØ Final Status\n');
  log('```');
  log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
  log('‚ïë                                                      ‚ïë');
  log('‚ïë     ‚úÖ ALL SMOKE TESTS PASSED SUCCESSFULLY! ‚úÖ      ‚ïë');
  log('‚ïë                                                      ‚ïë');
  log('‚ïë     Unicode Puzzles MCP v0.3.3 - READY              ‚ïë');
  log('‚ïë                                                      ‚ïë');
  log('‚ïë     Created by M&K (c)2025 The LibraxisAI Team     ‚ïë');
  log('‚ïë     Co-Authored-By:                                 ‚ïë');
  log('‚ïë       Maciej <void@div0.space>                      ‚ïë');
  log('‚ïë       Klaudiusz <the1st@whoai.am>                   ‚ïë');
  log('‚ïë                                                      ‚ïë');
  log('‚ïë     –®IERZY –®E –úNIE ‚àø ·µÇ‚Å±·µâ ≥·∂ª ∏  ∑·µâ ·µê‚Åø‚Å±·µâ              ‚ïë');
  log('‚ïë                                                      ‚ïë');
  log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
  log('```\n');

  // Save to file
  await fs.writeFile(outputFile, markdown);
  console.log(`\nüìù Results saved to: ${outputFile}`);
}

// Run tests
runTests().catch(console.error);